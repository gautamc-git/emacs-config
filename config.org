* General
** Disabling startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Disabling autosave and backup
 #+BEGIN_SRC emacs-lisp
   (setq make-backup-file nil)
   (setq auto-save-default nil)
 #+END_SRC
** mute the bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** gen
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (package-initialize)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (line-number-mode 1)
(column-number-mode 1)
#+END_SRC

** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)

#+END_SRC
** electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})

			      ))
  (electric-pair-mode t)
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
  :ensure t
  :bind("C-M-1" . sudo-edit) )
#+END_SRC

** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC
* Package Manager
** Melpa
#+BEGIN_SRC emacs-lisp
  ;; load emacs 24's package system. Add MELPA repository.
  (when (>= emacs-major-version 24)
    (require 'package)
    (add-to-list
     'package-archives
     ;; '("melpa" . "http://stable.melpa.org/packages/") ; many packages won't show if using stable
     '("melpa" . "http://melpa.milkbox.net/packages/")
     t)
    
    )
#+END_SRC
** Use Package
#+BEGIN_SRC emacs-lisp
  ;;install use-package if it doesnt exist
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* Themes
** spacemacs theme
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'spacemacs-theme)
    (package-refresh-contents)
    (package-install 'spacemacs-theme))
#+END_SRC

** alect themes
#+BEGIN_SRC emacs-lisp
  ;;download and install alect themes

  (unless (package-installed-p 'alect-themes)
    (package-refresh-contents)
    (package-install 'alect-themes))
#+END_SRC

* Others
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** yes/no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** which key
#+BEGIN_SRC emacs-lisp
  ;;enable which-key and use which-key mode 
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))


#+END_SRC
** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
  :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))

#+END_SRC
* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp

  (defvar term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Setting ansi term as the terminal and setting shortcuts
   #+BEGIN_SRC emacs-lisp
     (global-set-key(kbd "M-2") 'ansi-term)
   #+END_SRC
* Org
** Org_Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** miscellaneuous
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)

#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** ido vertical
#+BEGIN_SRC  emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-and-C-p-only)

#+END_SRC
** smex 
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init
    (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
* Buffer
** enable ibuffer
#+BEGIN_SRC emacs-lisp

  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** switch buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)

#+END_SRC
** expert 
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)

#+END_SRC
** kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)

#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Misc
** kill-whole-world
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

#+END_SRC
** copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-k") 'kill-all-buffers)
#+END_SRC
* config shortcut
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window 
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))

#+END_SRC
* split window cursor
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (rainbow-mode 1))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))

#+END_SRC
* auto completion
#+BEGIN_SRC emacs-lisp
   (use-package company
     :ensure t
     :init
     (add-hook 'after-init-hook 'global-company-mode))
   (setq company-dabbrev-downcase 0)
   (setq company-idle-delay 0)
#+END_SRC
* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+END_SRC
** diminish
#+BEGIN_SRC emacs-lisp 
 (use-package diminish
      :ensure
      :init
      (diminish 'hungry-delete-mode)
      (diminish 'beacon-mode)
      (diminish 'which-key-mode)
      (diminish 'subword-mode)
      (diminish 'rainbow-mode))

#+END_SRC

* smart-compile
#+BEGIN_SRC emacs-lisp
  (use-package smart-compile
    :ensure t
    )
  (global-set-key (kbd "M-3") 'smart-compile)

#+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t)
  (global-set-key (kbd "M-1") 'sr-speedbar-toggle)

#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

#+END_SRC
